     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL  _load_cr0, _store_cr0
    15 00000000                                 		GLOBAL 	_memtest_sub
    16 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c, _asm_inthandler20
    17 00000000                                 		GLOBAL  _load_tr, _farjmp 		
    18 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c, _inthandler20
    19 00000000                                 
    20                                          [SECTION .text]
    21 00000000                                 
    22 00000000                                 _io_hlt:	; void io_hlt(void);
    23 00000000 F4                              		HLT
    24 00000001 C3                              		RET
    25 00000002                                 
    26 00000002                                 _io_cli:	; void io_cli(void);
    27 00000002 FA                              		CLI
    28 00000003 C3                              		RET
    29 00000004                                 
    30 00000004                                 _io_sti:	; void io_sti(void);
    31 00000004 FB                              		STI
    32 00000005 C3                              		RET
    33 00000006                                 
    34 00000006                                 _io_stihlt:	; void io_stihlt(void);
    35 00000006 FB                              		STI
    36 00000007 F4                              		HLT
    37 00000008 C3                              		RET
    38 00000009                                 
    39 00000009                                 _io_in8:	; int io_in8(int port);
    40 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    41 0000000D B8 00000000                     		MOV		EAX,0
    42 00000012 EC                              		IN		AL,DX
    43 00000013 C3                              		RET
    44 00000014                                 
    45 00000014                                 _io_in16:	; int io_in16(int port);
    46 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    47 00000018 B8 00000000                     		MOV		EAX,0
    48 0000001D 66 ED                           		IN		AX,DX
    49 0000001F C3                              		RET
    50 00000020                                 
    51 00000020                                 _io_in32:	; int io_in32(int port);
    52 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    53 00000024 ED                              		IN		EAX,DX
    54 00000025 C3                              		RET
    55 00000026                                 
    56 00000026                                 _io_out8:	; void io_out8(int port, int data);
    57 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    58 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    59 0000002E EE                              		OUT		DX,AL
    60 0000002F C3                              		RET
    61 00000030                                 
    62 00000030                                 _io_out16:	; void io_out16(int port, int data);
    63 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    64 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    65 00000038 66 EF                           		OUT		DX,AX
    66 0000003A C3                              		RET
    67 0000003B                                 
    68 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    69 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    70 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    71 00000043 EF                              		OUT		DX,EAX
    72 00000044 C3                              		RET
    73 00000045                                 
    74 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    75 00000045 9C                              		PUSHFD		; PUSH EFLAGS という意味
    76 00000046 58                              		POP		EAX
    77 00000047 C3                              		RET
    78 00000048                                 
    79 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    80 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    81 0000004C 50                              		PUSH	EAX
    82 0000004D 9D                              		POPFD		; POP EFLAGS という意味
    83 0000004E C3                              		RET
    84 0000004F                                 
    85 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    86 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    87 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    88 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    89 0000005E C3                              		RET
    90 0000005F                                 
    91 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    92 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    93 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    95 0000006E C3                              		RET
    96 0000006F                                 		
    97 0000006F                                 _asm_inthandler20:
    98 0000006F 06                              		PUSH	ES
    99 00000070 1E                              		PUSH	DS
   100 00000071 60                              		PUSHAD
   101 00000072 89 E0                           		MOV		EAX,ESP
   102 00000074 50                              		PUSH	EAX
   103 00000075 66 8C D0                        		MOV		AX,SS
   104 00000078 8E D8                           		MOV		DS,AX
   105 0000007A 8E C0                           		MOV		ES,AX
   106 0000007C E8 [00000000]                   		CALL	_inthandler20
   107 00000081 58                              		POP		EAX
   108 00000082 61                              		POPAD
   109 00000083 1F                              		POP		DS
   110 00000084 07                              		POP		ES
   111 00000085 CF                              		IRETD
   112 00000086                                 		
   113 00000086                                 _asm_inthandler21:
   114 00000086 06                              		PUSH	ES
   115 00000087 1E                              		PUSH	DS
   116 00000088 60                              		PUSHAD
   117 00000089 89 E0                           		MOV		EAX,ESP
   118 0000008B 50                              		PUSH	EAX
   119 0000008C 66 8C D0                        		MOV		AX,SS
   120 0000008F 8E D8                           		MOV		DS,AX
   121 00000091 8E C0                           		MOV		ES,AX
   122 00000093 E8 [00000000]                   		CALL	_inthandler21
   123 00000098 58                              		POP		EAX
   124 00000099 61                              		POPAD
   125 0000009A 1F                              		POP		DS
   126 0000009B 07                              		POP		ES
   127 0000009C CF                              		IRETD
   128 0000009D                                 
   129 0000009D                                 _asm_inthandler27:
   130 0000009D 06                              		PUSH	ES
   131 0000009E 1E                              		PUSH	DS
   132 0000009F 60                              		PUSHAD
   133 000000A0 89 E0                           		MOV		EAX,ESP
   134 000000A2 50                              		PUSH	EAX
   135 000000A3 66 8C D0                        		MOV		AX,SS
   136 000000A6 8E D8                           		MOV		DS,AX
   137 000000A8 8E C0                           		MOV		ES,AX
   138 000000AA E8 [00000000]                   		CALL	_inthandler27
   139 000000AF 58                              		POP		EAX
   140 000000B0 61                              		POPAD
   141 000000B1 1F                              		POP		DS
   142 000000B2 07                              		POP		ES
   143 000000B3 CF                              		IRETD
   144 000000B4                                 
   145 000000B4                                 _asm_inthandler2c:
   146 000000B4 06                              		PUSH	ES
   147 000000B5 1E                              		PUSH	DS
   148 000000B6 60                              		PUSHAD
   149 000000B7 89 E0                           		MOV		EAX,ESP
   150 000000B9 50                              		PUSH	EAX
   151 000000BA 66 8C D0                        		MOV		AX,SS
   152 000000BD 8E D8                           		MOV		DS,AX
   153 000000BF 8E C0                           		MOV		ES,AX
   154 000000C1 E8 [00000000]                   		CALL	_inthandler2c
   155 000000C6 58                              		POP		EAX
   156 000000C7 61                              		POPAD
   157 000000C8 1F                              		POP		DS
   158 000000C9 07                              		POP		ES
   159 000000CA CF                              		IRETD
   160 000000CB                                 		
   161 000000CB                                 _load_cr0: 		; int load_cr0(void);
   162 000000CB 0F 20 C0                        		MOV		EAX, CR0
   163 000000CE C3                              		RET
   164 000000CF                                 		
   165 000000CF                                 _store_cr0:		; void store_cr0(int cr0);
   166 000000CF 8B 44 24 04                     		MOV 	EAX, [ESP+4]
   167 000000D3 0F 22 C0                        		MOV		CR0, EAX
   168 000000D6 C3                              		RET
   169 000000D7                                 
   170 000000D7                                 _load_tr:		; void load_tr(int tr);
   171 000000D7 0F 00 5C 24 04                  		LTR		[ESP+4]			;tr
   172 000000DC C3                              		RET
   173 000000DD                                 		
   174 000000DD                                 _farjmp:		;void farjmp(int eip, int cs);
   175 000000DD FF 6C 24 04                     		JMP		FAR [ESP + 4]
   176 000000E1 C3                              		RET
   177 000000E2                                 
   178 000000E2                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end);
   179 000000E2 57                              		PUSH	EDI
   180 000000E3 56                              		PUSH	ESI
   181 000000E4 53                              		PUSH	EBX
   182 000000E5 BE AA55AA55                     		MOV		ESI, 0XAA55AA55
   183 000000EA BF 55AA55AA                     		MOV		EDI, 0X55AA55AA
   184 000000EF 8B 44 24 10                     		MOV		EAX, [ESP + 12 + 4]
   185 000000F3                                 		
   186 000000F3                                 mts_loop:
   187 000000F3 89 C3                           		MOV		EBX, EAX
   188 000000F5 81 C3 00000FFC                  		ADD		EBX, 0XFFC
   189 000000FB 8B 13                           		MOV		EDX, [EBX]
   190 000000FD 89 33                           		MOV		[EBX], ESI
   191 000000FF 83 33 FF                        		XOR		DWORD [EBX], 0XFFFFFFFF
   192 00000102 3B 3B                           		CMP		EDI, [EBX]
   193 00000104 75 18                           		JNE		mts_fin
   194 00000106 83 33 FF                        		XOR		DWORD [EBX], 0XFFFFFFFF
   195 00000109 3B 33                           		CMP		ESI, [EBX]
   196 0000010B 75 11                           		JNE		mts_fin
   197 0000010D 89 13                           		MOV		[EBX], EDX
   198 0000010F 05 00001000                     		ADD		EAX, 0X1000
   199 00000114 3B 44 24 14                     		CMP		EAX, [ESP+12+8]
   200 00000118                                 		
   201 00000118 76 D9                           		JBE		mts_loop
   202 0000011A 5B                              		POP 	EBX
   203 0000011B 5E                              		POP		ESI
   204 0000011C 5F                              		POP		EDI
   205 0000011D C3                              		RET
   206 0000011E                                 		
   207 0000011E                                 mts_fin:
   208 0000011E 89 13                           		MOV		[EBX], EDX
   209 00000120 5B                              		POP		EBX
   210 00000121 5E                              		POP		ESI
   211 00000122 5F                              		POP		EDI
   212 00000123 C3                              		RET
   213 00000124                                 		